// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array twoToThe; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        let twoToThe = Array.new(16);

        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384; 

        return;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        let sum = 0;
        let shiftedX = x;

        let i = 0;
        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        return sum;
    }

    function boolean bit(int x, int i) {
        var int mask;
        let mask = twoToThe[i];
        return (~((x & mask) = 0));
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */

    /* 
     * if y > x: return 0
     * 
     * q = divide(x, 2*y)  // Recursively divide by doubling y until it exceeds x
     * 
     * // At this point:
     * // x is dividend, y is divisor
     * // 2*y*q represents amount already divided out (q copies of 2y)
     * // Check if remainder (x - 2*y*q) can fit another y
     * if (x - 2*y*q) < y:
     *     return 2*q      // Can't fit another y
     * else:
     *     return 2*q + 1  // Can fit one more y
     */
    function int divide(int x, int y) {
        var int result;
        var boolean negResult;
        
        // Handle division by zero
        if (y = 0) {
            return 0; // or could error
        }
        
        // Determine if result should be negative
        let negResult = false;
        if (x < 0) {
            let negResult = ~negResult;
            let x = Math.abs(x);
        }
        if (y < 0) {
            let negResult = ~negResult;
            let y = Math.abs(y);
        }
        
        let result = Math.divideHelper(x, y);
        
        if (negResult) {
            return -result;
        } else {
            return result;
        }
    }
    
    function int divideHelper(int x, int y) {
        var int q;

        // Base case: if y > x or if 2*y would overflow (y becomes negative)
        if ((y > x) | (y < 0)) {
            return 0;
        }

        let q = Math.divideHelper(x, 2*y);

        // Check if the remainder (x - 2*y*q) is less than y
        // If remainder < y, then we can't fit another y, so return 2*q
        // If remainder >= y, then we can fit one more y, so return 2*q + 1
        if ((x - (2*y*q)) < y) {
            return 2*q;
        } else {
            return (2*q) + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int intSqrt, bit, temp, tempSquared;
        
        // Handle edge cases
        if (x < 0) {
            return 0; // Cannot take square root of negative number
        }
        if (x = 0) {
            return 0;
        }
        if (x = 1) {
            return 1;
        }
        
        let intSqrt = 0;
        
        // Start from bit = n/2 - 1 where n is the bit length of x
        // For 16-bit integers, we start from bit 7 (since n/2 = 8, so 8-1 = 7)
        let bit = (Math.bitLength(x) / 2);
        if (bit > 7) {
            let bit = 7; // Cap at 7 for 16-bit integers
        }
        
        // Iterate from bit down to 0
        while (bit > -1) {
            let temp = intSqrt + twoToThe[bit];
            let tempSquared = temp * temp;
            
            // Check if (intSqrt + 2^bit)^2 <= x
            if ((tempSquared > 0) & (~(tempSquared > x))) {
                let intSqrt = temp;
            }
            
            let bit = bit - 1;
        }
        
        return intSqrt;
    }

    function int bitLength(int x) {
        var int n;
        let n = 0;
        while (x > 0) {
            let x = x / 2; 
            let n = n + 1;
        }
        return n;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }
}
