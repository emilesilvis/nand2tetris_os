// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;      // Character array to store the string
    field int length;     // Current length of the string
    field int maxLen;     // Maximum length of the string

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        // Handle edge case: maxLength 0 needs at least 1 space for empty string operations
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let str = Array.new(maxLength);
        let length = 0;
        let maxLen = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < maxLen) {
            let str[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i;
        var boolean neg;
        
        let val = 0;
        let i = 0;
        let neg = false;
        
        // Check for negative sign
        if ((length > 0) & (str[0] = 45)) {  // 45 is ASCII for '-'
            let neg = true;
            let i = 1;
        }
        
        // Process digits
        while ((i < length) & (str[i] > 47) & (str[i] < 58)) {  // 48-57 are ASCII for '0'-'9'
            let val = (val * 10) + (str[i] - 48);
            let i = i + 1;
        }
        
        if (neg) {
            return -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit, i;
        var boolean neg;
        
        let length = 0;
        let neg = false;
        
        // Handle negative numbers
        if (val < 0) {
            let neg = true;
            let val = -val;
        }
        
        // Handle special case of 0
        if (val = 0) {
            do appendChar(48);  // ASCII '0'
            return;
        }
        
        // Extract digits (they come out in reverse order)
        while (val > 0) {
            let lastDigit = val - ((val / 10) * 10);  // val % 10
            do appendChar(lastDigit + 48);  // Convert to ASCII
            let val = val / 10;
        }
        
        // Add negative sign if needed
        if (neg) {
            do appendChar(45);  // ASCII '-'
        }
        
        // Reverse the string to get correct order
        let i = 0;
        while (i < (length / 2)) {
            let lastDigit = str[i];
            let str[i] = str[length - 1 - i];
            let str[length - 1 - i] = lastDigit;
            let i = i + 1;
        }
        
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
