// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int screen;
    static boolean colour;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let colour = true;

        let twoToThe = Array.new(16);

        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384; 

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i< 8192) {
            do Memory.poke(screen+i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let colour = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, bit, word, value;

        let address = screen + (32*y)+(x/16);
        let value = Memory.peek(address);

        let bit = x & 15;  // x % 16
        let word = twoToThe[bit];

        if (colour) {
            let value = value | word;
        } else {
            let value = value & (~word);
        }

        do Memory.poke(address, value);
        
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int distanceX, distanceY, stepX, stepY, error;
        var int xDirection, yDirection;
        
        if (x2 > x1) {
            let distanceX = x2 - x1;
            let xDirection = 1;          // ADD: Going right
        } else {
            let distanceX = x1 - x2;
            let xDirection = -1;         // ADD: Going left
        }

        if (y2 > y1) {
            let distanceY = y2 - y1;
            let yDirection = 1;
        } else {
            let distanceY = y1 - y2;
            let yDirection = -1;
        }
        
        let stepX = 0;
        let stepY = 0;
        let error = distanceY - distanceX;

        while((stepX < distanceX) | (stepY < distanceY)) {
            do Screen.drawPixel(x1 + (stepX * xDirection), y1 + (stepY * yDirection));
            
            if (error < 0) {
                let stepX = stepX + 1;
                let error = error + distanceY;
            } else {
                let stepY = stepY + 1;
                let error = error - distanceX;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int distanceX, distanceY;
        
        //let distance = Math.sqrt(((y2-y1)*(y2-y1)) + ((x2-x1)*(x2-x1)));

        let distanceX = x2 - x1;
        let distanceY = y2 - y1;

        // Top
        do Screen.drawLine(x1, y1, x1 + distanceX, y1);
        // Bottom
        do Screen.drawLine(x1, y1 + distanceY, x1 + distanceX, y1 + distanceY);
        // Left
        do Screen.drawLine(x1, y1, x1, y1 + distanceY);
        // Right
        do Screen.drawLine(x1 + distanceX, y1, x1 + distanceX, y2);
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        return;
    }
}
